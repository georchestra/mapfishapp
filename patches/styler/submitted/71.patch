Index: lib/Styler/widgets/LegendPanel.js
===================================================================
--- lib/Styler/widgets/LegendPanel.js	(revision 1429)
+++ lib/Styler/widgets/LegendPanel.js	(working copy)
@@ -159,13 +159,56 @@
         Styler.LegendPanel.superclass.initComponent.call(this);
         this.update();
     },
-    
+
     /**
+     * Method: getRuleEntry
+     * Get the item corresponding to the rule.
+     *
+     * Parameters:
+     * rule - {OpenLayers.Rule}
+     *
+     * Returns:
+     * {Ext.Panel} The rule entry.
+     */
+    getRuleEntry: function(rule) {
+        return this.rulesContainer.items.get(this.rules.indexOf(rule));
+    },
+
+    /**
      * Method: addRuleEntry
+     * Add a new rule entry in the rules container. This
+     * method does not add the rule to the rules array.
+     *
+     * Parameters:
+     * rule - {OpenLayers.Rule}
+     * noDoLayout - {Boolean} If true doLayout is not called.
      */
-    addRuleEntry: function(rule) {
+    addRuleEntry: function(rule, noDoLayout) {
         this.rulesContainer.add(this.createRuleEntry(rule));
+        if(!noDoLayout) {
+            this.doLayout();
+        }
     },
+
+    /**
+     * Method: removeRuleEntry
+     * Remove a rule entry from the rules container, this
+     * method assumes the rule is in the rules array, and
+     * it does not remove the rule from the rules array.
+     *
+     * Parameters:
+     * rule - {OpenLayers.Rule}
+     * noDoLayout - {Boolean} If true doLayout is not called.
+     */
+    removeRuleEntry: function(rule, noDoLayout) {
+        var ruleEntry = this.getRuleEntry(rule);
+        if(ruleEntry) {
+            this.rulesContainer.remove(ruleEntry);
+            if(!noDoLayout) {
+                this.doLayout();
+            }
+        }
+    },
     
     /**
      * Method: selectRuleEntry
@@ -176,7 +219,7 @@
             this.unselect();
         }
         if(newSelection) {
-            var ruleEntry = this.rulesContainer.items.get(this.rules.indexOf(rule));
+            var ruleEntry = this.getRuleEntry(rule);
             ruleEntry.body.addClass("x-grid3-row-selected");
             this.selectedRule = rule;
             this.fireEvent("ruleselected", this, rule);
@@ -200,8 +243,6 @@
      * Method: createRuleEntry
      */
     createRuleEntry: function(rule) {
-        var symbolType = Styler.Util.getSymbolTypeFromRule(rule) || 
-            (rule[this.symbolType] ? this.symbolType : "Point");
         return {
             xtype: "panel",
             layout: "column",
@@ -210,39 +251,10 @@
             defaults: {
                 border: false
             },
-            items: [{
-                xtype: "gx_renderer",
-                symbolType: symbolType,
-                symbolizer: rule.symbolizer[symbolType] || rule.symbolizer,
-                style: this.clickableSymbol ? {cursor: "pointer"} : undefined,
-                listeners: {
-                    click: function() {
-                        if(this.clickableSymbol) {
-                            this.fireEvent("symbolclick", this, rule);
-                            this.fireEvent("ruleclick", this, rule);
-                        }
-                    },
-                    scope: this
-                }
-            }, {
-                cls: "x-form-item",
-                style: "padding: 0.2em 0.5em 0;", // TODO: css
-                bodyStyle: Ext.applyIf({background: "transparent"}, 
-                    this.clickableTitle ? {cursor: "pointer"} : undefined),
-                html: this.getRuleTitle(rule),
-                listeners: {
-                    render: function(comp) {
-                        this.clickableTitle && comp.getEl().on({
-                            click: function() {
-                                this.fireEvent("titleclick", this, rule);
-                                this.fireEvent("ruleclick", this, rule);
-                            },
-                            scope: this
-                        });
-                    },
-                    scope: this
-                }
-            }],
+            items: [
+                this.createRuleRenderer(rule),
+                this.createRuleTitle(rule)
+            ],
             listeners: {
                 render: function(comp){
                     this.selectOnClick && comp.getEl().on({
@@ -259,6 +271,68 @@
             }
         }
     },
+
+    /**
+     * Method: createRuleRenderer
+     * Create a renderer for the rule.
+     *
+     * Parameters:
+     * rule - {OpenLayers.Rule}
+     *
+     * Returns:
+     * {Styler.FeatureRenderer} The renderer.
+     */
+    createRuleRenderer: function(rule) {
+        var symbolType = Styler.Util.getSymbolTypeFromRule(rule) || 
+            (rule[this.symbolType] ? this.symbolType : "Point");
+        return {
+            xtype: "gx_renderer",
+            symbolType: symbolType,
+            symbolizer: rule.symbolizer[symbolType] || rule.symbolizer,
+            style: this.clickableSymbol ? {cursor: "pointer"} : undefined,
+            listeners: {
+                click: function() {
+                    if(this.clickableSymbol) {
+                        this.fireEvent("symbolclick", this, rule);
+                        this.fireEvent("ruleclick", this, rule);
+                    }
+                },
+                scope: this
+            }
+        };
+    },
+
+    /**
+     * Method: createRuleTitle
+     * Create a title panel for the rule.
+     *
+     * Parameters:
+     * rule - {OpenLayers.Rule}
+     *
+     * Returns:
+     * {Ext.Panel} The title panel.
+     */
+    createRuleTitle: function(rule) {
+        return {
+            cls: "x-form-item",
+            style: "padding: 0.2em 0.5em 0;", // TODO: css
+            bodyStyle: Ext.applyIf({background: "transparent"}, 
+                this.clickableTitle ? {cursor: "pointer"} : undefined),
+            html: this.getRuleTitle(rule),
+            listeners: {
+                render: function(comp) {
+                    this.clickableTitle && comp.getEl().on({
+                        click: function() {
+                            this.fireEvent("titleclick", this, rule);
+                            this.fireEvent("ruleclick", this, rule);
+                        },
+                        scope: this
+                    });
+                },
+                scope: this
+            }
+        };
+    },
     
     /**
      * Method: addDD
@@ -311,10 +385,27 @@
         var len = this.rules.length;
         var entry;
         for(var i=0; i<len; ++i) {
-            this.addRuleEntry(this.rules[i]);
+            this.addRuleEntry(this.rules[i], true);
         }
         this.doLayout();
     },
+
+    /**
+     * Method: updateRuleEntry
+     * Update the renderer and the title of a rule.
+     *
+     * Parameters:
+     * rule - {OpenLayers.Rule}
+     */
+    updateRuleEntry: function(rule) {
+        var ruleEntry = this.getRuleEntry(rule);
+        if(ruleEntry) {
+            ruleEntry.removeAll();
+            ruleEntry.add(this.createRuleRenderer(rule));
+            ruleEntry.add(this.createRuleTitle(rule));
+            ruleEntry.doLayout();
+        }
+    },
     
     /**
      * Method: moveRule
@@ -341,4 +432,4 @@
 
 });
 
-Ext.reg('gx_legendpanel', Styler.LegendPanel); 
\ No newline at end of file
+Ext.reg('gx_legendpanel', Styler.LegendPanel); 
