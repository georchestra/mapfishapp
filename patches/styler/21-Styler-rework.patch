Index: theme/css/styler.css
===================================================================
--- theme/css/styler.css	(révision 1095)
+++ theme/css/styler.css	(copie de travail)
@@ -60,12 +60,20 @@
     background-image: url(../img/magnifier.png);
 }
 
-.x-btn-icon .point {
-    background: transparent url(../img/bullet_orange.png);
+.x-btn .savegeometry {
+    background: transparent url(../img/disk.gif);
 }
-.x-btn-icon .linestring {
-    background: transparent url(../img/line_orange.png);
+
+.x-btn .point, .x-menu-item .point {
+  background: transparent url(../img/bullet_orange.png);
 }
-.x-btn-icon .polygon {
-    background: transparent url(../img/shape_square_orange.png);
+.x-btn .linestring, .x-menu-item .linestring {
+  background: transparent url(../img/line_orange.png);
+}
+.x-btn .polygon, .x-menu-item .polygon {
+  background: transparent url(../img/shape_square_orange.png);
+}
+
+.x-menu-item .database {
+  background: transparent url(../img/database_yellow.png);
 }
\ No newline at end of file
Index: theme/img/database_yellow.png
===================================================================
Impossible d'afficher : fichier considéré comme binaire.
svn:mime-type = application/octet-stream

Modification de propriétés sur theme/img/database_yellow.png
___________________________________________________________________
Ajouté : svn:executable
   + *
Ajouté : svn:mime-type
   + application/octet-stream

Index: theme/img/disk.gif
===================================================================
Impossible d'afficher : fichier considéré comme binaire.
svn:mime-type = application/octet-stream

Modification de propriétés sur theme/img/disk.gif
___________________________________________________________________
Ajouté : svn:mime-type
   + application/octet-stream

Index: lib/Styler/widgets/FilterPanel.js
===================================================================
--- lib/Styler/widgets/FilterPanel.js	(révision 1095)
+++ lib/Styler/widgets/FilterPanel.js	(copie de travail)
@@ -18,10 +18,22 @@
     attributes: null,
     
     /**
-     * Property: attributesComboConfig
+     * Property: valueContainer
+     * 
+     */
+    valueContainer: null,
+
+    /**
+     * Property: comparisonCombo
+     * {Ext.form.ComboBox}
+     */
+    comparisonCombo: null,
+
+    /**
+     * Property: filterPanelOptions
      * {Object}
      */
-    attributesComboConfig: null,
+    filterPanelOptions: null,
 
     initComponent: function() {
     
@@ -29,7 +41,7 @@
             this.attributes = new GeoExt.data.AttributeStore();
         }
 
-        var defAttributesComboConfig = {
+        this.attributesComboConfig = {
             xtype: "combo",
             store: this.attributes,
             mode: 'local',
@@ -43,20 +55,198 @@
             value: this.filter.property,
             listeners: {
                 select: function(combo, record) {
+                    this.adaptValueField(record);
+                    this.filterComparisonBox(record);
                     this.filter.property = record.get("name");
                     this.fireEvent("change", this.filter);
                 },
                 scope: this
-            },
-            width: 120
+            }
         };
-        this.attributesComboConfig = this.attributesComboConfig || {};
-        Ext.applyIf(this.attributesComboConfig, defAttributesComboConfig);
+        if (this.filterPanelOptions) {
+            if (this.filterPanelOptions.values) {
+                this.storeUriProperty = this.filterPanelOptions.values.storeUriProperty;
+                this.storeOptions = Ext.apply({}, this.filterPanelOptions.values.storeOptions);
+                this.comboOptions = Ext.apply({}, this.filterPanelOptions.values.comboOptions);
+            }
+            if (this.filterPanelOptions.attributesComboConfig) {
+                Ext.apply(this.attributesComboConfig, this.filterPanelOptions.attributesComboConfig);
+            }
+        }
         
+        this.addEvents(
+            /**
+             * Event: loading
+             * Fires when loading data from server
+             */
+            "loading",
+            /**
+             * Event: loaded
+             * Fires when finished loading data from server
+             */
+            "loaded"
+        );
+        
         Styler.FilterPanel.superclass.initComponent.call(this);
     },
-    
+   
     /**
+     * Method: setEqualComparison
+     * set comparison to equal and fires change event
+     *
+     */
+    setEqualComparison: function() {
+        this.comparisonCombo.store.filterBy(function(record){
+            return (
+                (record.get('value') == OpenLayers.Filter.Comparison.EQUAL_TO) ||
+                (record.get('value') == OpenLayers.Filter.Comparison.NOT_EQUAL_TO) 
+            );
+        });
+        this.comparisonCombo.setValue(OpenLayers.Filter.Comparison.EQUAL_TO);
+        this.filter.type = OpenLayers.Filter.Comparison.EQUAL_TO;
+        this.fireEvent("change", this.filter);
+    },
+
+    /**
+     * Method: adaptValueField
+     * 
+     *
+     * Parameters:
+     * record - {Ext.data.Record}
+     */
+    adaptValueField: function(record) {
+        var previousCmp = this.valueContainer.items.items[0];
+        var newCmpWidth = (previousCmp instanceof(Ext.form.ComboBox)) ? 
+            previousCmp.getSize().width+17 : // 17 = trigger size
+            previousCmp.getSize().width;
+        
+        var recordIsDate = (record.get('type')=='dateTime' || 
+            record.get('type')=='date');
+        
+        var onChange = function(el, value) {
+            if (value instanceof Ext.data.Record) {
+                value = value.get('value');
+            }
+            if (recordIsDate) {
+                var dt = new Date(value);
+                value = dt.format('c');
+            }
+            this.filter.value = value;
+            this.fireEvent("change", this.filter);
+        };
+        
+        if (this.storeUriProperty && record.get(this.storeUriProperty)) {
+            this.setEqualComparison();
+            var store = new Ext.data.JsonStore(Ext.apply({
+                url: record.get(this.storeUriProperty),
+                listeners: {
+                    "beforeload": function(store, options) {
+                        this.fireEvent("loading");
+                    },
+                    "loadexception": function() {
+                        this.fireEvent("loaded");
+                    },
+                    scope: this
+                }
+            }, this.storeOptions));
+
+            var field = new Ext.form.ComboBox(Ext.apply({
+                store: store,
+                mode: 'local',
+                width: newCmpWidth, 
+                triggerAction: 'all',
+                listeners: {
+                    'select': onChange,
+                    'change': onChange,
+                    scope: this
+                }
+            }, this.comboOptions));
+            
+            store.on('load', function(store, records){
+                field.setValue(records[0].get(this.comboOptions.valueField));
+                this.fireEvent("loaded");
+                field.fireEvent('change', field, field.getValue());
+            }, this);
+            
+            store.load();
+            
+        } else if (recordIsDate) {
+            var field = new Ext.form.DateField({
+                width: newCmpWidth,
+                value: '',
+                format: 'd/m/Y',
+                allowBlank: false,
+                blankText: "Ce champ est nécessaire",
+                listeners: {
+                    'select': onChange,
+                    'change': onChange,
+                    scope: this
+                }
+            });
+            
+        } else {
+            var field = new Ext.form.TextField({
+                width: newCmpWidth,
+                value: '',
+                allowBlank: false,
+                blankText: "Ce champ est nécessaire"
+            });
+            field.on('change', onChange, this);
+        }
+
+        this.valueContainer.remove(previousCmp);
+        this.valueContainer.add(field);
+        this.valueContainer.doLayout();
+    }, 
+
+    /**
+     * Method: filterComparisonBox
+     * filter comparison box according to attribute's type 
+     *
+     * Parameters:
+     * record - {Ext.data.Record}
+     */
+    filterComparisonBox: function(record) {
+        this.comparisonCombo.store.clearFilter();
+        switch (record.get('type')) {
+            case 'boolean':
+                this.setEqualComparison();
+                this.valueContainer.items.items[0].store.on('load', function() {
+                    this.valueContainer.items.items[0].setValue(true);
+                    this.filter.value = true;
+                    this.fireEvent("change", this.filter);
+                }, this);
+                break;
+            case 'string':
+                this.comparisonCombo.store.filterBy(function(record){
+                    return (
+                        (record.get('value') == OpenLayers.Filter.Comparison.EQUAL_TO) ||
+                        (record.get('value') == OpenLayers.Filter.Comparison.NOT_EQUAL_TO) ||
+                        (record.get('value') == OpenLayers.Filter.Comparison.LIKE)
+                    );
+                });
+                break;
+            case 'integer':
+            case 'int':
+            case 'float':
+                this.comparisonCombo.store.filterBy(function(record){
+                    return (record.get('value') != OpenLayers.Filter.Comparison.LIKE);
+                });
+                break;
+            case 'dateTime':
+                this.comparisonCombo.store.filterBy(function(record){
+                    return (
+                        (record.get('value') != OpenLayers.Filter.Comparison.LIKE) &&
+                        (record.get('value') != OpenLayers.Filter.Comparison.NOT_EQUAL_TO)
+                    );
+                });
+                break;
+            default:
+                break;
+        }
+    },
+
+    /**
      * Method: createDefaultFilter
      * May be overridden to change the default filter.
      *
@@ -72,46 +262,60 @@
      * Creates a panel config containing filter parts.
      */
     createFilterItems: function() {
-        
+        this.valueContainer = new Ext.Panel({
+            columnWidth: 0.5,
+            items: [{
+                xtype: "textfield",
+                value: this.filter.value,
+                allowBlank: false,
+                blankText: "Ce champ est nécessaire",
+                listeners: {
+                    change: function(el, value) {
+                        this.filter.value = value;
+                        this.fireEvent("change", this.filter);
+                    },
+                    scope: this
+                }
+            }],
+            listeners: {
+                'resize': function(p, newWidth) {
+                    p.findByType("textfield")[0].setWidth(newWidth);
+                }
+            }
+        });
+
+        this.comparisonCombo = new Styler.form.ComparisonComboBox({
+            value: this.filter.type,
+            width: 50,
+            blankText: "Ce champ est nécessaire",
+            listeners: {
+                select: function(combo, record) {
+                    this.filter.type = record.get("value");
+                    this.fireEvent("change", this.filter);
+                },
+                scope: this
+            }
+        });
+
         return [{
             layout: "column",
             border: false,
             defaults: {border: false},
             items: [{
-                width: this.attributesComboConfig.width, 
-                items: [this.attributesComboConfig]
-            }, {
-                items: [{
-                    xtype: "gx_comparisoncombo",
-                    value: this.filter.type,
-                    blankText: "Ce champ est nécessaire",
-                    listeners: {
-                        select: function(combo, record) {
-                            this.filter.type = record.get("value");
-                            this.fireEvent("change", this.filter);
-                        },
-                        scope: this
+                items: [this.attributesComboConfig],
+                columnWidth: 0.5,
+                listeners: {
+                    'resize': function(p, newWidth) {
+                        p.findByType("combo")[0].setWidth(newWidth);
                     }
-                }]
+                }
             }, {
-                items: [{
-                    xtype: "textfield",
-                    width: 120,
-                    value: this.filter.value,
-                    allowBlank: false,
-                    blankText: "Ce champ est nécessaire",
-                    listeners: {
-                        change: function(el, value) {
-                            this.filter.value = value;
-                            this.fireEvent("change", this.filter);
-                        },
-                        scope: this
-                    }
-                }]
-            }]
+                width: 56,
+                style: "padding: 0 3px;",
+                items: [this.comparisonCombo]
+            }, this.valueContainer]
         }];
     }
-
 });
 
 Ext.reg('gx_filterpanel', Styler.FilterPanel); 
Index: lib/Styler/widgets/SpatialFilterPanel.js
===================================================================
--- lib/Styler/widgets/SpatialFilterPanel.js	(révision 1095)
+++ lib/Styler/widgets/SpatialFilterPanel.js	(copie de travail)
@@ -33,6 +33,13 @@
     zindex: null,
     
     /**
+     * Property: cookieProvider
+     * {Ext.state.CookieProvider} The cookie provider
+     * Used for storing a geometry (if available) ...
+     */  
+    cookieProvider: null,
+    
+    /**
      * Property: toggleGroup
      * {String} the toggleGroup for the modify feature button
      */
@@ -91,7 +98,8 @@
      */
     createDefaultFilter: function() {
         return new OpenLayers.Filter.Spatial({
-            value: this.feature.geometry
+            value: this.feature.geometry,
+            projection: this.map.getProjection()
         });
     },
     
@@ -115,49 +123,90 @@
     createFilterItems: function() {
         var className = this.feature.geometry.CLASS_NAME;
         var cls = className.substr(className.lastIndexOf('.')+1).toLowerCase();
+        var width = this.comboConfig.width;
+        if (this.deactivable) {
+            width += 35;
+        }
+
+        var buttonPanels = [{
+            items: [{
+                xtype: "button",
+                iconCls: cls,
+                tooltip: "Modifier la géométrie",
+                enableToggle: true,
+                toggleGroup: this.toggleGroup,
+                listeners: {
+                    "toggle": function(btn, pressed) {
+                        var feature = this.feature;
+                        if (pressed) {
+                            var geometry = feature.geometry;
+                            if (geometry.CLASS_NAME == "OpenLayers.Geometry.Point") {
+                                this.map.setCenter(
+                                    geometry.getBounds().getCenterLonLat()
+                                );
+                            } else {
+                                this.map.zoomToExtent(
+                                    geometry.getBounds().scale(1.05)
+                                );
+                            }
+                            // zindex hack (might need a rework of the handler feature 's
+                            // moveLayerToTop and moveLayerBack methods to manage this)
+                            zindex = feature.layer.getZIndex();
+                            this.mfControl.activate();
+                            this.mfControl.selectFeature(feature);
+                            feature.layer.setZIndex(this.map.Z_INDEX_BASE['Feature']+1);
+                        } else {
+                            this.mfControl.unselectFeature(feature);
+                            this.mfControl.deactivate();
+                            feature.layer.setZIndex(zindex);
+                        }
+                    },
+                    scope: this
+                }
+            }]
+        }];
+        
+        if (this.cookieProvider) {
+            buttonPanels.push({
+                items: [{
+                    xtype: "button",
+                    iconCls: "savegeometry",
+                    tooltip: "Enregistrer cette géométrie",
+                    handler: function() {
+                        if (this.feature && this.feature.geometry) {
+                            this.cookieProvider.set('geometry', 
+                                this.cookieProvider.encodeValue(this.feature.geometry.toString())
+                            );
+                            alert('Géométrie enregistrée pour 30 jours sur ce navigateur.');
+                        }
+                    },
+                    scope: this
+                }]
+            });
+        }
+
         return [{
             layout: "column",
             border: false,
-            defaults: {border: false},
+            defaults: {
+                border: false
+            },
             items: [{
-                width: this.comboConfig.width, 
-                items: [this.comboConfig]
-            }, {
+                width: this.comboConfig.width,
+                layout: 'column',
                 items: [{
-                    xtype: "button", 
-                    iconCls: cls,
-                    tooltip: "Modifier la géométrie",
-                    enableToggle: true,
-                    toggleGroup: this.toggleGroup,
-                    listeners: {
-                        "toggle": function(btn, pressed) {
-                            var feature = this.feature;
-                            if (pressed) {
-                                var geometry = feature.geometry;
-                                if (geometry.CLASS_NAME == "OpenLayers.Geometry.Point") {
-                                    this.map.setCenter(
-                                        geometry.getBounds().getCenterLonLat()
-                                    );
-                                } else {
-                                    this.map.zoomToExtent(
-                                        geometry.getBounds().scale(1.05)
-                                    );
-                                }
-                                // zindex hack (might need a rework of the handler feature 's
-                                // moveLayerToTop and moveLayerBack methods to manage this)
-                                zindex = feature.layer.getZIndex();
-                                this.mfControl.activate();
-                                this.mfControl.selectFeature(feature);
-                                feature.layer.setZIndex(this.map.Z_INDEX_BASE['Feature']+1);
-                            } else {
-                                this.mfControl.unselectFeature(feature);
-                                this.mfControl.deactivate();
-                                feature.layer.setZIndex(zindex);
-                            }
-                        },
-                        scope: this
-                    }
+                    width: this.comboConfig.width, 
+                    border: false,
+                    items: [this.comboConfig]
                 }]
+            }, {
+                width: 70,
+                layout: 'column',
+                defaults: {
+                    border: false,
+                    bodyStyle: 'padding-left:.5em;'
+                },
+                items: buttonPanels
             }]
         }];
     }
Index: lib/Styler/widgets/form/ComparisonComboBox.js
===================================================================
--- lib/Styler/widgets/form/ComparisonComboBox.js	(révision 1095)
+++ lib/Styler/widgets/form/ComparisonComboBox.js	(copie de travail)
@@ -30,9 +30,11 @@
             displayField: "name",
             valueField: "value",
             store: new Ext.data.SimpleStore({
-                data: this.allowedTypes,
-                fields: ["value", "name"]
+                fields: ["value", "name"],
+                data: this.allowedTypes
             }),
+            mode: 'local',
+            lastQuery: '',
             value: (this.value === undefined) ? this.allowedTypes[0][0] : this.value
         };
         Ext.applyIf(this, defConfig);
@@ -41,4 +43,4 @@
     }
 });
 
-Ext.reg("gx_comparisoncombo", Styler.form.ComparisonComboBox);
\ No newline at end of file
+Ext.reg("gx_comparisoncombo", Styler.form.ComparisonComboBox);
Index: lib/Styler/widgets/FilterBuilder.js
===================================================================
--- lib/Styler/widgets/FilterBuilder.js	(révision 1095)
+++ lib/Styler/widgets/FilterBuilder.js	(copie de travail)
@@ -26,6 +26,12 @@
      */
     allowedBuilderTypes: null,
     
+    /**
+     * Property: filterPanelOptions
+     * {Object} Allows customization of attributes comboBox
+     */
+    filterPanelOptions: null,
+    
     rowHeight: 25,
 
     builderType: null,
@@ -46,8 +52,14 @@
     allowGroups: true,
     
     /**
+     * Property: geometryTypes
+     * {Array} List all possible geometry types to search  with.
+     */
+    geometryTypes: [ 'polygon', 'line', 'point' ],
+    
+    /**
      * Property: allowSpatial
-     * {Boolean} Allow spatial conditions to be added.  Default is true.
+     * {Boolean} Allow spatial conditions to be added.  Default is false.
      */
     allowSpatial: false,
     
@@ -61,14 +73,30 @@
     /**
      * Property: map
      * {OpenLayers.Map} The map object to which we add our vectorLayer
-     *      required if allowSpatial is true (which is default)
+     *      required if allowSpatial is true.
      */
     map: null,
+    
+    /**
+     * Property: cookieProvider
+     * {Ext.state.CookieProvider} The cookie provider
+     * Used for storing filters or geometries (if available) ...
+     */  
+    cookieProvider: null,
 
+    /**
+     * Property: deactivable
+     * {Boolean}
+     */
+    deactivable: false,
+
     initComponent: function() {
         var defConfig = {
             plain: true,
-            border: false,
+            layout: 'column',
+            defaults: {
+                columnWidth: 1
+            },
             defaultBuilderType: Styler.FilterBuilder.ANY_OF
         };
         Ext.applyIf(this, defConfig);
@@ -82,6 +110,8 @@
         this.items = [
             {
                 xtype: "panel",
+                height: 35,
+                layout: 'fit',
                 border: false,
                 items: [{
                     xtype: "panel",
@@ -107,27 +137,6 @@
         ];
         
         this.bbar = this.createToolBar();
-        
-        if (this.allowSpatial) {
-            this.controls = [];
-            var layer = this.createVectorLayer();
-            this.tbar = this.createEditionToolBar(layer);
-            this.vectorLayer = layer;
-            
-            // register to events modifying panel's visibility 
-            // so that we hide our vectorLayer when not visible
-            // accordion
-            this.on('expand', this.setUp, this);
-            this.on('collapse', this.tearDown, this);
-            // tabs
-            this.on('activate', this.setUp, this);
-            this.on('deactivate', this.tearDown, this);
-            // manual enable/disable
-            this.on('enable', this.setUp, this);
-            this.on('disable', this.tearDown, this);
-            // for card layouts, we have no event to listen to !
-        }
-        
         this.addEvents(
             /**
              * Event: change
@@ -137,7 +146,17 @@
              * builder - {Styler.FilterBuilder} This filter builder.  Call
              *     <getFilter> to get the updated filter.
              */
-            "change"
+            "change",
+            /**
+             * Event: loading
+             * Fires when loading data from server
+             */
+            "loading",
+            /**
+             * Event: loaded
+             * Fires when finished loading data from server
+             */
+            "loaded"
         ); 
 
         Styler.FilterBuilder.superclass.initComponent.call(this);
@@ -145,8 +164,10 @@
     
     deactivateControls: function() {
         var controls = this.controls;
-        for (var i=0,l=controls.length; i<l; i++) {
-            controls[i].deactivate();
+        if (controls) {
+            for (var i=0,l=controls.length; i<l; i++) {
+                controls[i].deactivate();
+            }
         }
     },
     
@@ -168,71 +189,114 @@
      */
     createToolBar: function() {
         var bar = [{
-            text: "ajouter une condition",
+            text: "condition",
             iconCls: "add",
             handler: function() {
                 this.addCondition();
             },
             scope: this
         }];
-        if(this.allowGroups) {
+        if(this.allowSpatial) {
+            this.controls = [];
+            var layer = this.createVectorLayer();
             bar.push({
-                text: "ajouter un groupe",
+                text: "condition spatiale",
                 iconCls: "add",
-                handler: function() {
-                    this.addCondition('group');
-                },
+                menu: this.createEditingMenu(layer),
                 scope: this
             });
+            this.vectorLayer = layer;
+            
+            // register to events modifying panel's visibility 
+            // so that we hide our vectorLayer when not visible
+            // accordion
+            this.on('expand', this.setUp, this);
+            this.on('collapse', this.tearDown, this);
+            // tabs
+            this.on('activate', this.setUp, this);
+            this.on('deactivate', this.tearDown, this);
+            // manual enable/disable
+            this.on('enable', this.setUp, this);
+            this.on('disable', this.tearDown, this);
+            // for card layouts, we have no event to listen to !
         }
-        /*
-        if(this.allowSpatial) {
+        if(this.allowGroups) {
             bar.push({
-                text: "spatial",
+                text: "groupe",
                 iconCls: "add",
                 handler: function() {
-                    this.addCondition('spatial');
+                    this.addCondition('group');
                 },
                 scope: this
             });
-        }*/
+        }
         return bar;
     },
     
     /**
-     * Method: createEditionToolBar
+     * Method: createEditingMenu
      */
-    createEditionToolBar: function(layer) {
+    createEditingMenu: function(layer) {
         var createDrawControl = function(handler, controls) {
-            var control = new OpenLayers.Control.DrawFeature(layer, handler)
+            var control = new OpenLayers.Control.DrawFeature(layer, handler);
             controls.push(control);
             return control;
         };
-        return new Ext.Toolbar({
-            items: [
-                new GeoExt.Action({
-                    control: createDrawControl(OpenLayers.Handler.Point, this.controls),
-                    map: this.map,
-                    toggleGroup: "querier",
-                    tooltip: "Ajouter une condition géographique sur la base d'un point",
-                    iconCls: "drawpoint"
-                }),
-                new GeoExt.Action({
-                    control: createDrawControl(OpenLayers.Handler.Path, this.controls),
-                    map: this.map,
-                    toggleGroup: "querier",
-                    tooltip: "Ajouter une condition géographique sur la base d'une ligne",
-                    iconCls: "drawline"
-                }),
-                new GeoExt.Action({
-                    control: createDrawControl(OpenLayers.Handler.Polygon, this.controls),
-                    map: this.map,
-                    toggleGroup: "querier",
-                    tooltip: "Ajouter une condition géographique sur la base d'un polygone",
-                    iconCls: "drawpolygon"
-                })
-            ]
-        });
+        var items = [];
+        if (this.geometryTypes.indexOf('point')>-1) {
+            items.push(new Ext.menu.CheckItem(new GeoExt.Action({
+                control: createDrawControl(OpenLayers.Handler.Point, this.controls),
+                map: this.map,
+                group: "querier",
+                text: "sur la base d'un point",
+                iconCls: "point"
+            })));
+        }
+        if (this.geometryTypes.indexOf('line')>-1) {
+            items.push(new Ext.menu.CheckItem(new GeoExt.Action({
+                control: createDrawControl(OpenLayers.Handler.Path, this.controls),
+                map: this.map,
+                group: "querier",
+                text: "sur la base d'une ligne",
+                iconCls: "linestring"
+            })));
+        }
+        if (this.geometryTypes.indexOf('polygon')>-1) {
+            items.push(new Ext.menu.CheckItem(new GeoExt.Action({
+                control: createDrawControl(OpenLayers.Handler.Polygon, this.controls),
+                map: this.map,
+                group: "querier",
+                text: "sur la base d'un polygone",
+                iconCls: "polygon"
+            })));
+        }
+        if (this.cookieProvider) {
+            var item = new Ext.menu.CheckItem({
+                text: "sur la base d'une géométrie stockée",
+                disabled: !this.cookieProvider.get('geometry', false),
+                handler: function() {
+                    var wkt = this.cookieProvider.decodeValue(
+                        this.cookieProvider.get('geometry')
+                    );
+                    this.vectorLayer.addFeatures([
+                        new OpenLayers.Format.WKT().read(wkt)
+                    ]);
+                },
+                scope: this,
+                iconCls: "database"
+            });
+            this.cookieProvider.on('statechange', function(cp, key, value){
+                if (key == 'geometry') {
+                    if (value.length) {
+                        item.enable();
+                    } else {
+                        item.disable();
+                    }
+                }
+            }, this);
+            items.push(item);
+        }
+        return new Ext.menu.Menu({items: items});
     },
     
     /**
@@ -248,13 +312,71 @@
     getFilter: function() {
         var filter;
         if(this.filter) {
-            filter = this.filter.clone();
+            filter = this.removeUnchecked(this.cloneFilter(this.filter));
             if(filter instanceof OpenLayers.Filter.Logical) {
                 filter = this.cleanFilter(filter);
             }
         }
         return filter;
     },
+
+    /**
+     * Method: cloneFilter
+     * A special cloning method which takes care of the "removed" property
+     *     
+     * Parameters:
+     * f - {OpenLayers.Filter} A filter.
+     *
+     * Returns:
+     * {OpenLayers.Filter} A filter
+     */
+    cloneFilter: function(f) {
+        var filter;
+        if(f instanceof OpenLayers.Filter.Logical) {
+            var filters = [];
+            for(var i=0, len=f.filters.length; i<len; ++i) {
+                filters.push(this.cloneFilter(f.filters[i]));
+            }
+            filter = new OpenLayers.Filter.Logical({
+                type: f.type,
+                filters: filters
+            });
+            if (f.removed === true) {
+                filter.removed = true;
+            }
+        }  else {
+            filter = f.clone();
+        }
+        return filter;
+    },
+
+    /**
+     * Method: removeUnchecked
+     * Returns a filter containing only those which have been checked
+     *
+     * Parameters:
+     * filter - {OpenLayers.Filter} A filter.
+     *
+     * Returns:
+     * {OpenLayers.Filter} A filter
+     */
+    removeUnchecked: function(filter) {
+        if(filter instanceof OpenLayers.Filter.Logical) {
+            var toDelete = [];
+            var filters = filter.filters;
+            for (var i = 0, l = filters.length; i<l; i++) {
+                if (filters[i].removed === true) {
+                    toDelete.push(filters[i]); 
+                } else {
+                    filters[i] = this.removeUnchecked(filters[i]);
+                }
+            }
+            for (var j = 0, ll = toDelete.length; j<ll; j++) {
+                OpenLayers.Util.removeItem(filters, toDelete[j]);
+            }
+        }
+        return filter;
+    },
     
     /**
      * Method: cleanFilter
@@ -277,7 +399,7 @@
                 for(var i=0, len=filter.filters.length; i<len; ++i) {
                     child = filter.filters[i];
                     if(child instanceof OpenLayers.Filter.Logical) {
-                        filter.filters[i] = this.cleanFilter(child)
+                        filter.filters[i] = this.cleanFilter(child);
                     }
                 }
             }
@@ -385,6 +507,7 @@
         if(feature instanceof OpenLayers.Feature.Vector) {
             return new OpenLayers.Filter.Spatial({
                 value: feature.geometry,
+                projection: this.map.getProjection(),
                 type: OpenLayers.Filter.Spatial.INTERSECTS
             });
         } else {
@@ -410,6 +533,7 @@
         layer.events.on({
             "featureadded": function(options) {
                 this.addCondition("spatial", options.feature);
+                this.deactivateControls();
             },
             scope: this
         });
@@ -456,9 +580,15 @@
         var cfg = {
             customizeFilterOnInit: (conditionType == "group") && false,
             listeners: {
-                change: function() {
+                "change": function() {
                     this.fireEvent("change", this);
                 },
+                "loaded": function() {
+                    this.fireEvent("loaded");
+                },
+                "loading": function() {
+                    this.fireEvent("loading");
+                },
                 scope: this
             }
         };
@@ -469,6 +599,8 @@
             Ext.apply(cfg, {
                 xtype: "gx_filterbuilder",
                 filter: filter,
+                deactivable: this.deactivable,
+                filterPanelOptions: Ext.apply({}, this.filterPanelOptions),
                 attributes: this.attributes
             });
             break;
@@ -477,6 +609,7 @@
             Ext.apply(cfg, {
                 xtype: "gx_spatialfilterpanel",
                 filter: filter,
+                cookieProvider: this.cookieProvider,
                 feature: feature,
                 toggleGroup: "querier",
                 map: this.map
@@ -487,7 +620,8 @@
             Ext.apply(cfg, {
                 xtype: "gx_filterpanel",
                 filter: filter,
-                attributes: this.attributes
+                attributes: this.attributes,
+                filterPanelOptions: Ext.apply({}, this.filterPanelOptions)
             });
         }
         var newChild = this.newRow(cfg);
@@ -504,7 +638,7 @@
      */
     removeCondition: function(panel, filter) {
         var parent = this.filter.filters[0].filters;
-        if(parent.length > 1) {
+        if(parent.length >= 1) {
             parent.remove(filter);
             panel.getComponent(1).getComponent(0).tearDown();
             this.childFiltersPanel.remove(panel);
@@ -542,7 +676,7 @@
                 },
                 scope: this
             },
-            width: 60 // TODO: move to css
+            width: 85 // TODO: move to css
         };
     },
     
@@ -591,7 +725,12 @@
     createChildFiltersPanel: function() {
         this.childFiltersPanel = new Ext.Panel({
             border: false,
-            defaults: {border: false}
+            layout: 'column',
+            bufferResize: true,
+            defaults: {
+                border: false,
+                columnWidth: 1
+            }
         });
         var grandchildren = this.filter.filters[0].filters;
         var grandchild;
@@ -602,10 +741,18 @@
                     "gx_filterbuilder" : "gx_filterpanel",
                 filter: grandchild,
                 attributes: this.attributes,
+                deactivable: this.deactivable,
+                filterPanelOptions: Ext.apply({}, this.filterPanelOptions),
                 listeners: {
-                    change: function() {
+                    "change": function() {
                         this.fireEvent("change", this);
                     },
+                    "loading": function() {
+                        this.fireEvent("loading");
+                    },
+                    "loaded": function() {
+                        this.fireEvent("loaded");
+                    },
                     scope: this
                 }
             }));
@@ -623,29 +770,62 @@
      * {Ext.Panel} A panel that serves as a row in a child filters panel.
      */
     newRow: function(filterPanel) {
-        var panel = new Ext.Panel({
+        var panel;
+        var firstItems = [{
+            border: false,
+            bodyStyle: "padding-left: 0.25em;",
+            items: [{
+                xtype: "button",
+                tooltip: "Supprimer cette condition",
+                cls: 'x-btn-icon',
+                iconCls: "delete",
+                handler: function() {
+                    this.removeCondition(panel, filterPanel.filter);
+                },
+                scope: this
+            }]
+        }];
+        
+        if (this.deactivable) {
+            var checkbox = new Ext.form.Checkbox({
+                checked: true
+            });
+            checkbox.on('check', function(cb, checked){
+                filterPanel.filter.removed = !checked;
+                this.fireEvent("change", filterPanel.filter);
+            }, this);
+            firstItems.push({
+                bodyStyle: "padding: 0 5px;", 
+                border: false,
+                items: [ checkbox ]
+            });
+        }
+    
+        panel = new Ext.Panel({
             layout: "column",
             defaults: {border: false},
-            style: "padding: 0.5em 0.25em;",
+            listeners: {
+                'resize': function() {
+                    this.doLayout();
+                }
+            },
+            //style: "padding: 0.25em 0.5em;", // nice look in FF but not in IE
+            style: "padding: 0.25em 0;",
             items: [{
                 border: false,
-                columnWidth: 0.1,
-                items: [{
-                    xtype: "button",
-                    tooltip: "Supprimer cette condition",
-                    cls: 'x-btn-icon',
-                    iconCls: "delete",
-                    handler: function() {
-                        this.removeCondition(panel, filterPanel.filter);
-                    },
-                    scope: this
-                }]
+                width: 60,
+                layout: 'column',
+                defaults: {
+                    columnWidth: 0.5
+                },
+                items: firstItems
             }, {
                 items: [filterPanel],
                 border: false,
-                columnWidth: 0.9
+                columnWidth: 1 
             }]
         });
+        
         return panel;
     },
 
Index: lib/Styler/widgets/BaseFilterPanel.js
===================================================================
--- lib/Styler/widgets/BaseFilterPanel.js	(révision 1095)
+++ lib/Styler/widgets/BaseFilterPanel.js	(copie de travail)
@@ -17,6 +17,7 @@
         
         var defConfig = {
             plain: true,
+            layout: 'fit',
             border: false
         };
         Ext.applyIf(this, defConfig);
@@ -69,4 +70,4 @@
         return true;
     }
     
-});
\ No newline at end of file
+});
